# -*- mode: python ; coding: utf-8 -*-

import os
import sys

# Get the current directory
current_dir = os.path.dirname(os.path.abspath(SPEC))

# Define data files to include
data_files = [
    ('stress_cnn_model.h5', '.'),
    ('stress_analysis.py', '.'),
    ('stress_client.py', '.'),
    ('register_device.py', '.'),
    ('start_service.py', '.'),
    ('install_service.py', '.'),
    ('.env', '.'),
    ('icon.ico', '.'),
]

# Add logs directory if it exists
logs_dir = os.path.join(current_dir, 'logs')
if os.path.exists(logs_dir):
    data_files.append(('logs', 'logs'))

# Define hidden imports for Windows service
hidden_imports = [
    # Core Python modules
    'json',
    'os',
    'sys',
    'subprocess',
    'threading',
    'time',
    'datetime',
    'platform',
    'uuid',
    'base64',
    'logging',
    'logging.handlers',

    # Windows service modules
    'win32api',
    'win32con',
    'win32serviceutil',
    'win32service',
    'win32event',
    'servicemanager',
    'socket',

    # Third-party packages
    'requests',
    'dotenv',
    'cv2',
    'cv2.cv2',
    'numpy',
    'numpy.core',
    'tensorflow',
    'tensorflow.keras',
    'tensorflow.keras.models',
    'tensorflow.keras.utils',
    'tensorflow.keras.layers',
    'tensorflow.keras.preprocessing',
    'tensorflow.keras.preprocessing.image',
    'tensorflow.keras.applications',
    'tensorflow.keras.optimizers',
    'tensorflow.keras.losses',
    'tensorflow.keras.metrics',
    'tensorflow.keras.callbacks',
    'tensorflow.keras.backend',
    'tensorflow.python',
    'tensorflow.python.keras',
    'tensorflow.python.keras.models',
    'tensorflow.python.keras.utils',
    'tensorflow.python.keras.layers',
    'tensorflow.python.keras.preprocessing',
    'tensorflow.python.keras.preprocessing.image',
    'tensorflow.python.tools',
    'tensorflow.python.tools.freeze_graph',
    'tensorflow.python.tools.optimize_for_inference',
    'tensorflow.python.tools.graph_transforms',
    'tensorflow.python.tools.import_pb_to_tensorboard',
    'tensorflow.python.tools.inspect_checkpoint',
    'tensorflow.python.tools.saved_model_cli',
    'tensorflow.python.tools.saved_model_utils',
    'tensorflow.python.tools.tensorboard',
    'tensorflow.python.tools.tfprof',
    'tensorflow.python.tools.tf2xla',
    'tensorflow.python.tools.xla_extract',
    'tensorflow.python.tools.xla_hlo_profile',
    'tensorflow.python.tools.xla_op_registry',
    'tensorflow.python.tools.xla_translate',
    'tensorflow.python.tools.xla_tracer',
    'tensorflow.python.tools.xla_viewer',
    'tensorflow.python.tools.xla_compile',
    'tensorflow.python.tools.xla_aot_compile',
    'tensorflow.python.tools.xla_jit_compile',
    'tensorflow.python.tools.xla_optimize',
    'tensorflow.python.tools.xla_profile',
    'tensorflow.python.tools.xla_run',
    'tensorflow.python.tools.xla_test',
    'tensorflow.python.tools.xla_train',
    'tensorflow.python.tools.xla_utils',
    'tensorflow.python.tools.xla_visualize',
    'tensorflow.python.tools.xla_wrap',
    'tensorflow.python.platform',
    'tensorflow.python.platform.app',
    'tensorflow.python.platform.flags',
    'tensorflow.python.platform.gfile',
    'tensorflow.python.platform.resource_loader',
    'tensorflow.python.platform.sysconfig',
    'tensorflow.python.platform.test',
    'tensorflow.python.platform.tf_logging',
    'tensorflow.python.util',
    'tensorflow.python.util.deprecation',
    'tensorflow.python.util.nest',
    'tensorflow.python.util.serialization',
    'tensorflow.python.util.tf_decorator',
    'tensorflow.python.util.tf_export',
    'tensorflow.python.util.tf_inspect',
    'tensorflow.python.util.tf_stack',
    'tensorflow.python.util.traceback_utils',
    'tensorflow.python.eager',
    'tensorflow.python.eager.context',
    'tensorflow.python.eager.executor',
    'tensorflow.python.eager.tape',
    'tensorflow.python.framework',
    'tensorflow.python.framework.dtypes',
    'tensorflow.python.framework.errors',
    'tensorflow.python.framework.graph_util',
    'tensorflow.python.framework.importer',
    'tensorflow.python.framework.op_def_library',
    'tensorflow.python.framework.ops',
    'tensorflow.python.framework.tensor_shape',
    'tensorflow.python.framework.tensor_util',
    'tensorflow.python.framework.versions',
    'tensorflow.python.ops',
    'tensorflow.python.ops.array_ops',
    'tensorflow.python.ops.check_ops',
    'tensorflow.python.ops.control_flow_ops',
    'tensorflow.python.ops.control_flow_util',
    'tensorflow.python.ops.gen_array_ops',
    'tensorflow.python.ops.gen_control_flow_ops',
    'tensorflow.python.ops.gen_math_ops',
    'tensorflow.python.ops.gen_nn_ops',
    'tensorflow.python.ops.init_ops',
    'tensorflow.python.ops.io_ops',
    'tensorflow.python.ops.linalg_ops',
    'tensorflow.python.ops.logging_ops',
    'tensorflow.python.ops.math_ops',
    'tensorflow.python.ops.nn_ops',
    'tensorflow.python.ops.parsing_ops',
    'tensorflow.python.ops.random_ops',
    'tensorflow.python.ops.resource_variable_ops',
    'tensorflow.python.ops.session_ops',
    'tensorflow.python.ops.shape_ops',
    'tensorflow.python.ops.sparse_ops',
    'tensorflow.python.ops.state_ops',
    'tensorflow.python.ops.string_ops',
    'tensorflow.python.ops.summary_ops',
    'tensorflow.python.ops.tensor_array_ops',
    'tensorflow.python.ops.variable_scope',
    'tensorflow.python.ops.variables',
    'tensorflow.python.training',
    'tensorflow.python.training.adam',
    'tensorflow.python.training.checkpoint_management',
    'tensorflow.python.training.checkpoint_utils',
    'tensorflow.python.training.coordinator',
    'tensorflow.python.training.device_setter',
    'tensorflow.python.training.evaluation',
    'tensorflow.python.training.gradient_descent',
    'tensorflow.python.training.learning_rate_decay',
    'tensorflow.python.training.monitored_session',
    'tensorflow.python.training.optimizer',
    'tensorflow.python.training.queue_runner',
    'tensorflow.python.training.saver',
    'tensorflow.python.training.session_manager',
    'tensorflow.python.training.session_run_hook',
    'tensorflow.python.training.summary_io',
    'tensorflow.python.training.supervisor',
    'tensorflow.python.training.training_util',
    'tensorflow.python.client',
    'tensorflow.python.client.session',
    'tensorflow.python.client.timeline',
    'tensorflow.python.debug',
    'tensorflow.python.debug.cli',
    'tensorflow.python.debug.lib',
    'tensorflow.python.debug.wrappers',
    'tensorflow.python.saved_model',
    'tensorflow.python.saved_model.builder',
    'tensorflow.python.saved_model.constants',
    'tensorflow.python.saved_model.loader',
    'tensorflow.python.saved_model.main_op',
    'tensorflow.python.saved_model.signature_constants',
    'tensorflow.python.saved_model.signature_def_utils',
    'tensorflow.python.saved_model.simple_save',
    'tensorflow.python.saved_model.tag_constants',
    'tensorflow.python.saved_model.utils',
    'tensorflow.python.estimator',
    'tensorflow.python.estimator.estimator',
    'tensorflow.python.estimator.export',
    'tensorflow.python.estimator.inputs',
    'tensorflow.python.estimator.model_fn',
    'tensorflow.python.estimator.run_config',
    'tensorflow.python.estimator.training',
    'tensorflow.python.lib',
    'tensorflow.python.lib.io',
    'tensorflow.python.lib.io.file_io',
    'tensorflow.python.lib.io.python_io',
    'tensorflow.python.lib.io.tf_record',
    'tensorflow.python.summary',
    'tensorflow.python.summary.summary',
    'tensorflow.python.summary.writer',
    'tensorflow.python.grappler',
    'tensorflow.python.grappler.cluster',
    'tensorflow.python.grappler.cost_analyzer',
    'tensorflow.python.grappler.item',
    'tensorflow.python.grappler.tf_optimizer',
    'tensorflow.core',
    'tensorflow.core.framework',
    'tensorflow.core.protobuf',
    'tensorflow.compiler',
    'tensorflow.compiler.xla',
    'tensorflow.compiler.tf2xla',
    'tensorflow.lite',
    'tensorflow.lite.python',
    'tensorflow.estimator',
    'tensorflow.estimator.api',
    'tensorflow.feature_column',
    'tensorflow.saved_model',
    'tensorflow.saved_model.builder',
    'tensorflow.saved_model.signature_constants',
    'tensorflow.saved_model.tag_constants',
    'tensorflow.saved_model.utils',
    'tensorflow.summary',
    'tensorflow.train',
    'tensorflow.train.queue_runner',
    'tensorflow.data',
    'tensorflow.data.experimental',
    'tensorflow.io',
    'tensorflow.io.gfile',
    'tensorflow.math',
    'tensorflow.nn',
    'tensorflow.ops',
    'tensorflow.random',
    'tensorflow.strings',
    'tensorflow.sparse',
    'tensorflow.lookup',
    'tensorflow.experimental',
    'tensorflow.experimental.numpy',
    'tensorflow.compat',
    'tensorflow.compat.v1',
    'tensorflow.compat.v2',
    'keras',
    'keras.api',
    'keras.api.keras',
    'keras.api.keras.models',
    'keras.api.keras.layers',
    'keras.api.keras.utils',
    'keras.api.keras.preprocessing',
    'keras.api.keras.preprocessing.image',
    'keras.models',
    'keras.layers',
    'keras.utils',
    'keras.preprocessing',
    'keras.preprocessing.image',
    'keras.applications',
    'keras.optimizers',
    'keras.losses',
    'keras.metrics',
    'keras.callbacks',
    'keras.backend',
    'PIL',
    'PIL.Image',
    'schedule',
    'typing',
    'collections.abc',

    # Application modules - ALL Python files
    'stress_analysis',
    'stress_client',
    'register_device',
    'start_service',
    'install_service',
    'stress_app',
    'stress_detection_service',

# Define binaries (DLLs, etc.)
binaries = []

# Define excludes
excludes = [
    'tkinter',
    'tkinter.ttk',
    'tkinter.messagebox',
    'tkinter.scrolledtext',
    'tkinter.filedialog',
    'tkinter.test',
    'test',
    'unittest',
    'pydoc',
    'ttkthemes',
    # TensorFlow optimizations - exclude unused components
    'tensorflow.compiler',
    'tensorflow.lite',
    'tensorflow.python.debug',
    'tensorflow.python.tools',
    'tensorflow.contrib',
    # Other large unused packages
    'matplotlib',
    'scipy',
    'pandas',
    'sklearn',
    'jupyter',
    'notebook',
    'ipykernel',
]

a = Analysis(
    ['stress_detection_service.py'],
    pathex=[current_dir],
    binaries=binaries,
    datas=data_files,
    hiddenimports=hidden_imports,
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=excludes,
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=None,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=None)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='StressDetectionService',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=True,  # Service needs console for debugging
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon='icon.ico',
)